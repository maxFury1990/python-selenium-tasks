{"name": "test_check_person_information", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: window was already closed\n  (Session info: chrome=95.0.4638.69)", "trace": "self = <task_selenium.test_grid_dynamic_blog.TestGridDynamics object at 0x7fe97a34ef70>\nbrowser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"cc96d000449780e4cee0b6de83d2ec2f\")>\n\n    @allure.feature(\"Check filling data\")\n    def test_check_person_information(self, browser):\n        main_page = MainPage(browser)\n        with allure.step(\"1\"):\n            main_page.go_to_url()\n        with allure.step(\"2\"):\n            main_page.click_get_in_touch()\n        with allure.step(\"3\"):\n>           main_page.check_get_in_touch_is_opened()\n\ntest_grid_dynamic_blog.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/main_page.py:59: in check_get_in_touch_is_opened\n    assert self.driver.current_url == \"https://www.griddynamics.com/contact\", f\"You are not in Get In Touch page,\" \\\n../venv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:669: in current_url\n    return self.execute(Command.GET_CURRENT_URL)['value']\n../venv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fe97a34e9a0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: window was already closed\\\\n  ...fff204598fc _pthread_start + 224\\\\n20  libsystem_pthread.dylib             0x00007fff20455443 thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: window was already closed\nE         (Session info: chrome=95.0.4638.69)\n\n../venv/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:242: NoSuchWindowException"}, "steps": [{"name": "1", "status": "passed", "start": 1636711918455, "stop": 1636711920713}, {"name": "2", "status": "passed", "steps": [{"name": "Click on Touch button", "status": "passed", "start": 1636711920713, "stop": 1636711936675}], "start": 1636711920713, "stop": 1636711936675}, {"name": "3", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: window was already closed\n  (Session info: chrome=95.0.4638.69)\n\n", "trace": "  File \"/Users/marsonov/PycharmProjects/gridu/task_selenium/test_grid_dynamic_blog.py\", line 49, in test_check_person_information\n    main_page.check_get_in_touch_is_opened()\n  File \"/Users/marsonov/PycharmProjects/gridu/venv/lib/python3.9/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/Users/marsonov/PycharmProjects/gridu/task_selenium/pages/main_page.py\", line 59, in check_get_in_touch_is_opened\n    assert self.driver.current_url == \"https://www.griddynamics.com/contact\", f\"You are not in Get In Touch page,\" \\\n  File \"/Users/marsonov/PycharmProjects/gridu/venv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py\", line 669, in current_url\n    return self.execute(Command.GET_CURRENT_URL)['value']\n  File \"/Users/marsonov/PycharmProjects/gridu/venv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"/Users/marsonov/PycharmProjects/gridu/venv/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "steps": [{"name": "Ensure page Contact Us opened", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: window was already closed\n  (Session info: chrome=95.0.4638.69)\n\n", "trace": "  File \"/Users/marsonov/PycharmProjects/gridu/venv/lib/python3.9/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/Users/marsonov/PycharmProjects/gridu/task_selenium/pages/main_page.py\", line 59, in check_get_in_touch_is_opened\n    assert self.driver.current_url == \"https://www.griddynamics.com/contact\", f\"You are not in Get In Touch page,\" \\\n  File \"/Users/marsonov/PycharmProjects/gridu/venv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py\", line 669, in current_url\n    return self.execute(Command.GET_CURRENT_URL)['value']\n  File \"/Users/marsonov/PycharmProjects/gridu/venv/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"/Users/marsonov/PycharmProjects/gridu/venv/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1636711936676, "stop": 1636711936822}], "start": 1636711936675, "stop": 1636711936835}], "start": 1636711918455, "stop": 1636711936836, "uuid": "28c03e5e-42cf-4dec-ad06-ba8777c3b1bc", "historyId": "9fc8de164a741b4e5ce42a054dd5d154", "testCaseId": "f0f7c25a49a45a5778fbc424bc5127f6", "fullName": "test_grid_dynamic_blog.TestGridDynamics#test_check_person_information", "labels": [{"name": "feature", "value": "Check filling data"}, {"name": "suite", "value": "test_grid_dynamic_blog"}, {"name": "subSuite", "value": "TestGridDynamics"}, {"name": "host", "value": "C9953"}, {"name": "thread", "value": "72214-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_grid_dynamic_blog"}]}